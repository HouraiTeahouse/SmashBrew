#if UNITY_EDITOR
using Hourai.Editor;
using UnityEditor;
using UnityEngine;
using Vexe.Runtime.Extensions;

namespace Hourai.SmashBrew.Editor {

    public enum NameType {

        SurnameFirst,
        SurnameLast,
        Single,
        Title

    }

    public class CharacterEditorData : ScriptableObject {

        private const string CharacterRootFolder = "Characters";
        private const string GeneratedFolderName = "_Autogenerated";
        private const string RuntimeDataSuffix = "_data";

        #region Model Properties

        public GameObject Prefab {
            get { return _prefab; }
            set { _prefab = value; }
        }

        #endregion

        public void Generate() {
            //If this object is not an asset
            AssetUtil.CreateAsset(RootFolder, this);

            //Create the Runtime Resources folder if it doesn't already exist
            AssetUtil.CreateFolder(RuntimeResources);

            if (RuntimeData == null && !EditorApplication.isPlayingOrWillChangePlaymode) {
                _runtimeData = CreateInstance<CharacterData>();
                _runtimeData.name = InternalName + RuntimeDataSuffix;
                AssetUtil.CreateAsset(RuntimeResources, _runtimeData);
            }
        }

        #region Serialized Fields

        [SerializeField]
        private GameObject _prefab;

        [SerializeField]
        private string _firstName = "Marisa";

        [SerializeField]
        private string _lastName = "Kirisame";

        [SerializeField]
        private NameType _nameType = NameType.SurnameLast;

        [SerializeField]
        private Texture2D _generalPortrait;

        [SerializeField]
        private CharacterData _runtimeData;

        #endregion

        #region Name Properties

        public string FirstName {
            get { return _firstName; }
            set { _firstName = value; }
        }

        public string LastName {
            get { return _lastName; }
            set { _lastName = value; }
        }

        public NameType NameStyle {
            get { return _nameType; }
            set { _nameType = value; }
        }

        public string FullName {
            get {
                if (_firstName.IsNullOrEmpty())
                    return _lastName;
                if (_lastName.IsNullOrEmpty() || _nameType == NameType.Single)
                    return _firstName;
                if (_nameType == NameType.SurnameFirst)
                    return LastName + " " + FirstName;
                if (_nameType == NameType.Title)
                    return LastName + " no " + FirstName;
                return FirstName + " " + LastName;
            }
        }

        public string InternalName {
            get { return name; }
            set { name = value; }
        }

        #endregion

        #region File/Folder Properties

        public string CharacterDataFolder {
            get { return AssetUtil.CreateAssetPath(CharacterRootFolder); }
        }

        public string RootFolder {
            get { return AssetUtil.CreateAssetPath(CharacterRootFolder, InternalName); }
        }

        public string GeneratedFolder {
            get { return AssetUtil.CreateAssetPath(CharacterRootFolder, InternalName, GeneratedFolderName); }
        }

        public string RuntimeResources {
            get {
                return AssetUtil.CreateAssetPath(CharacterRootFolder, InternalName, GeneratedFolderName, "Resources");
            }
        }

        public CharacterData RuntimeData {
            get {
                if (_runtimeData == null)
                    _runtimeData = Resources.Load<CharacterData>(InternalName + RuntimeDataSuffix);
                return _runtimeData;
            }
        }

        #endregion
    }

}

#endif